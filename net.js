// Generated by CoffeeScript 1.10.0
(function() {
  (function() {
    var utilFunction;
    Ext.ns('AR.util');
    utilFunction = AR.util.fn = {};
    Ext.apply(utilFunction, {
      toggleSelectAll: function(thisScope) {
        var checkedAll, costCbx, costCheckBoxs, i, ln;
        costCheckBoxs = jQuery(thisScope).closest('table').find('.chargeCheckBox');
        checkedAll = jQuery(thisScope).attr('checked');
        i = 0;
        ln = costCheckBoxs.length;
        while (i < ln) {
          costCbx = jQuery(costCheckBoxs[i]);
          if (!costCbx.hasClass('DisplayNone')) {
            costCbx.attr('checked', checkedAll);
          }
          i++;
        }
      },
      selectCheckBox: function(thisScope) {
        var allSelect, checkBoxHeader, i, item, itemCheckBoxList, ln, thisTable;
        thisTable = jQuery(thisScope).closest('table');
        checkBoxHeader = jQuery('#chargeCheckBoxHeader');
        if (jQuery(thisScope).attr('checked') !== checkBoxHeader.attr('checked')) {
          allSelect = true;
          itemCheckBoxList = thisTable.find('input.chargeCheckBox');
          i = 0;
          ln = itemCheckBoxList.length;
          while (i < ln) {
            item = jQuery(itemCheckBoxList[i]);
            if (!item.attr('checked')) {
              allSelect = false;
              break;
            }
            i++;
          }
          checkBoxHeader.attr('checked', allSelect);
        }
      },
      initToolTip: function() {
        Ext.widget('tooltip', {
          cls: 'x-tip-form-invalid',
          target: Ext.getBody(),
          delegate: '.ErrorCls',
          trackMouse: true,
          anchor: 'top',
          listeners: {
            beforeshow: function(tip, e) {
              var field;
              field = tip.triggerElement;
              tip.update(jQuery(tip.triggerElement).next().html());
              return true;
            }
          }
        });
        Ext.widget('tooltip', {
          target: Ext.getBody(),
          delegate: '.WarnCls',
          trackMouse: true,
          anchor: 'top',
          listeners: {
            beforeshow: function(tip, e) {
              var field;
              field = tip.triggerElement;
              tip.update(jQuery(tip.triggerElement).next().html());
              return true;
            }
          }
        });
      },
      showWarn: function(cmp, errMsg) {
        var div;
        div = cmp.next('div');
        if (div.length > 0) {
          div.html(errMsg);
        } else {
          cmp.after('<div style="display:none">' + errMsg + '</div>');
        }
        cmp.addClass('WarnCls');
      },
      showError: function(cmp, errMsg) {
        var div;
        div = cmp.next('div');
        if (div.length > 0) {
          div.html(errMsg);
        } else {
          cmp.after('<div style="display:none">' + errMsg + '</div>');
        }
        cmp.addClass('ErrorCls');
      },
      hideError: function(cmp) {
        cmp.removeClass('ErrorCls');
      },
      hideWarn: function(cmp) {
        cmp.removeClass('WarnCls');
      },
      checkValid: function(input, errMsg) {
        var me;
        me = this;
        if (errMsg) {
          me.showError(input, errMsg);
          return false;
        } else {
          me.hideError(input);
          return true;
        }
      },
      getUnit: function(tr) {
        var unit;
        var ln;
        var i;
        var i, ln, unit, unitList, units;
        unitList = [];
        units = tr.find('input.unit');
        if (units.length > 0) {
          i = 0;
          ln = units.length;
          while (i < ln) {
            unit = jQuery(units[i]);
            unitList.push(Number(unit.val()));
            i++;
          }
        } else {
          units = tr.find('td.unit');
          i = 0;
          ln = units.length;
          while (i < ln) {
            unit = jQuery(units[i]);
            unitList.push(Number(unit.html()));
            i++;
          }
        }
        return unitList;
      },
      getChargeUnit: function(tr) {
        var chargeUnit;
        chargeUnit = void 0;
        if (tr.find('input.chargeUnit').length > 0) {
          chargeUnit = Number(tr.find('input.chargeUnit').val());
        } else {
          chargeUnit = Number(tr.find('td.chargeUnit').html());
        }
        return chargeUnit;
      },
      getExchRate: function(tr) {
        var exchRate;
        exchRate = void 0;
        if (tr.find('input.exchangeRate').length > 0) {
          exchRate = Number(tr.find('input.exchangeRate').val());
        } else {
          exchRate = Number(tr.find('td.exchangeRateTd').html());
        }
        return Number(exchRate);
      },
      getVatRate: function(tr) {
        var val;
        val = void 0;
        if (tr.find('select.vatRate').length > 0) {
          val = tr.find('select.vatRate').val();
        } else {
          val = tr.find('.vatRate').html();
        }
        if (val) {
          return Number(val) / 100;
        } else {
          return 0;
        }
      },
      setChargeAmount: function(tr, netAmount) {
        tr.find('.chargeAmount').html(this.formatAmount(netAmount));
      },
      setExchChargeAmount: function(tr, resultForDisplay) {
        var applyMinMax, minMax;
        applyMinMax = '';
        if (resultForDisplay.minMax) {
          applyMinMax = resultForDisplay.minMax === 'MIN' ? '(Min)' : '(Max)';
        }
        minMax = '<font style="font-style:italic;">' + applyMinMax + '</font>';
        tr.find('.exchangedAmount').html(this.formatAmount(resultForDisplay.netExchAmt) + minMax);
      },
      setVatAmount: function(tr, vatAmount) {
        tr.find('.vatAmount').html(this.formatAmount(vatAmount));
      },
      formatAmount: function(num) {
        var decimal, integer, prefix;
        integer = Number(String(num).split('.')[0]);
        prefix = Number(num) < 0 && '-' || '';
        decimal = String(num).split('.')[1];
        if (decimal) {
          return prefix + Ext.util.Format.number(Math.abs(integer), ',') + '.' + decimal;
        } else {
          return prefix + Ext.util.Format.number(Math.abs(integer), ',');
        }
      },
      calculateCharge: function(invoiceDto, chargeDto) {
        var vatExchAmt;
        var netExchAmt;
        var netAmt;
        var vatExchAmt;
        var vatAmt;
        var vatExchAmt;
        var vatAmt;
        var amount, chargeMeasurementList, chargeRoundingOption, chargeUnit, exchAmt, exchRate, i, ln, netAmt, netExchAmt, numberOfUnit, result, roundByChrgOpt, roundByInvcOpt, roundingOption, unitRate, vatAmt, vatExchAmt, vatRate;
        chargeMeasurementList = chargeDto.chargeMeasurementList;
        unitRate = parseFloat(chargeDto.unitRate || 0);
        roundingOption = invoiceDto.currency.roundingOption;
        chargeRoundingOption = chargeDto.currency.roundingOption;
        exchRate = parseFloat(chargeDto.exchRate);
        vatRate = parseFloat(chargeDto.vatRate || 0) / 100;
        result = {};
        amount = 1;
        roundByChrgOpt = this.roundAmtFunc(chargeDto.currency.roundingOption);
        roundByInvcOpt = this.roundAmtFunc(invoiceDto.currency.roundingOption);
        i = 0;
        ln = chargeMeasurementList.length;
        while (i < ln) {
          numberOfUnit = chargeMeasurementList[i].numberOfUnit || 1;
          chargeUnit = chargeMeasurementList[i].unit || 0;
          amount *= chargeUnit * numberOfUnit;
          i++;
        }
        if (isNaN(amount)) {
          amount = 0;
        }
        amount *= unitRate;
        if (amount > 0 && (chargeDto.minValue || chargeDto.maxValue)) {
          if (chargeDto.minValue && amount < chargeDto.minValue) {
            amount = chargeDto.minValue;
            result.minMax = 'MIN';
          } else if (chargeDto.maxValue && amount > chargeDto.maxValue) {
            amount = chargeDto.maxValue;
            result.minMax = 'MAX';
          }
        }
        result.exchRate = exchRate;
        amount = roundByChrgOpt(amount);
        result.amount = result.netAmt = amount;
        exchAmt = roundByInvcOpt(amount * exchRate);
        result.exchAmt = result.netExchAmt = exchAmt;
        if (invoiceDto.vatApplied || !Ext.isEmpty(AR.controller.ArCreateDetail.taxCodeList)) {
          if (chargeDto.intercom) {
            if (chargeDto.vatOption === 'SHA_VAT') {
              vatAmt = roundByChrgOpt(amount / (1 + vatRate) * vatRate);
              vatExchAmt = roundByInvcOpt(vatAmt * exchRate);
              result.vatExchAmt = vatExchAmt;
              netAmt = roundByChrgOpt(amount - vatAmt);
              netExchAmt = roundByInvcOpt(exchAmt - vatExchAmt);
              result.netAmt = netAmt;
              result.netExchAmt = netExchAmt;
            } else {
              vatAmt = roundByChrgOpt(amount * vatRate);
              vatExchAmt = roundByInvcOpt(vatAmt * exchRate);
              result.vatExchAmt = vatExchAmt;
            }
          } else {
            if (chargeDto.vatOption === 'SHA_VAT') {
              vatAmt = roundByChrgOpt(amount / (1 + vatRate) * vatRate);
              vatExchAmt = roundByInvcOpt(exchAmt / (1 + vatRate) * vatRate);
              result.vatExchAmt = vatExchAmt;
              netAmt = roundByChrgOpt(amount - vatAmt);
              netExchAmt = roundByInvcOpt(exchAmt - vatExchAmt);
              result.netAmt = netAmt;
              result.netExchAmt = netExchAmt;
            } else {
              vatExchAmt = roundByInvcOpt(exchAmt * vatRate);
              result.vatExchAmt = vatExchAmt;
            }
          }
        }
        Ext.apply(chargeDto, result);
      },
      roundAmtFunc: function(chargeRoundingOption, resultForDisplay) {
        if (resultForDisplay) {
          return function(amt, amtType) {
            var formatedAmt;
            formatedAmt = icsjs.fx.roundAmount(amt, chargeRoundingOption);
            if (amtType) {
              resultForDisplay[amtType] = formatedAmt;
            }
            return Number(formatedAmt);
          };
        } else {
          return function(amt) {
            var formatedAmt;
            formatedAmt = icsjs.fx.roundAmount(amt, chargeRoundingOption);
            return Number(formatedAmt);
          };
        }
      },
      calculateRow: function(tr) {
        var total;
        var oriTotal;
        var vatExchAmt;
        var netExchAmt;
        var netAmt;
        var vatExchAmt;
        var vatAmt;
        var vatExchAmt;
        var vatAmt;
        var amount, chargeDto, chargeUnit, currency, deffAmt, exchAmt, exchRate, i, invoiceDto, invoiceIndex, ln, netAmt, netExchAmt, numberOfUnit, oriTotal, originAmt, result, resultForDisplay, roundByChrgOpt, roundByInvcOpt, total, unitValues, vatAmt, vatExchAmt, vatRate;
        result = {};
        resultForDisplay = {};
        chargeDto = this.getChargeDto(tr);
        invoiceDto = this.getInvoiceDto(tr);
        unitValues = this.getUnit(tr);
        chargeUnit = this.getChargeUnit(tr);
        exchRate = this.getExchRate(tr);
        vatRate = this.getVatRate(tr);
        amount = 1;
        originAmt = parseFloat(chargeDto.netExchAmt || 0) + parseFloat(chargeDto.vatExchAmt || 0);
        roundByChrgOpt = this.roundAmtFunc(chargeDto.currency.roundingOption, resultForDisplay);
        roundByInvcOpt = this.roundAmtFunc(invoiceDto.currency.roundingOption, resultForDisplay);
        if (chargeDto.intercom) {
          vatRate = chargeDto.vatRate / 100;
        }
        i = 0;
        ln = unitValues.length;
        while (i < ln) {
          numberOfUnit = 1;
          if (!Ext.isEmpty(chargeDto.chargeMeasurementList) && chargeDto.chargeMeasurementList[i].numberOfUnit) {
            numberOfUnit = chargeDto.chargeMeasurementList[i].numberOfUnit;
          }
          amount = amount * unitValues[i] * numberOfUnit;
          i++;
        }
        amount *= chargeUnit;
        if (amount > 0 && (chargeDto.minValue || chargeDto.maxValue)) {
          if (chargeDto.minValue && amount < chargeDto.minValue) {
            amount = chargeDto.minValue;
            result.minMax = 'MIN';
          } else if (chargeDto.maxValue && amount > chargeDto.maxValue) {
            amount = chargeDto.maxValue;
            result.minMax = 'MAX';
          }
          resultForDisplay.minMax = result.minMax;
        }
        result.exchRate = exchRate;
        amount = roundByChrgOpt(amount, 'netAmt');
        result.amount = result.netAmt = amount;
        exchAmt = roundByInvcOpt(amount * exchRate, 'netExchAmt');
        result.exchAmt = result.netExchAmt = exchAmt;
        if (invoiceDto.vatApplied || !Ext.isEmpty(AR.controller.ArCreateDetail.taxCodeList)) {
          if (chargeDto.intercom) {
            if (chargeDto.vatOption === 'SHA_VAT') {
              vatAmt = roundByChrgOpt(amount / (1 + vatRate) * vatRate);
              vatExchAmt = roundByInvcOpt(vatAmt * exchRate, 'vatExchAmt');
              result.vatExchAmt = vatExchAmt;
              netAmt = roundByChrgOpt(amount - vatAmt, 'netAmt');
              netExchAmt = roundByInvcOpt(exchAmt - vatExchAmt, 'netExchAmt');
              result.netAmt = netAmt;
              result.netExchAmt = netExchAmt;
            } else {
              vatAmt = roundByChrgOpt(amount * vatRate);
              vatExchAmt = roundByInvcOpt(vatAmt * exchRate, 'vatExchAmt');
              result.vatExchAmt = vatExchAmt;
            }
          } else {
            if (chargeDto.vatOption === 'SHA_VAT') {
              vatAmt = roundByChrgOpt(amount / (1 + vatRate) * vatRate);
              vatExchAmt = roundByInvcOpt(exchAmt / (1 + vatRate) * vatRate, 'vatExchAmt');
              result.vatExchAmt = vatExchAmt;
              netAmt = roundByChrgOpt(amount - vatAmt, 'netAmt');
              netExchAmt = roundByInvcOpt(exchAmt - vatExchAmt, 'netExchAmt');
              result.netAmt = netAmt;
              result.netExchAmt = netExchAmt;
            } else {
              vatExchAmt = roundByInvcOpt(exchAmt * vatRate, 'vatExchAmt');
              result.vatExchAmt = vatExchAmt;
            }
          }
        }
        Ext.apply(chargeDto, result);
        this.refreshRow(tr, resultForDisplay);
        deffAmt = result.netExchAmt + (result.vatExchAmt || 0) - originAmt;
        currency = invoiceDto.currency;
        if (AR.controller.ArCreateDetail.isBatch) {
          invoiceIndex = Number(tr.closest('tbody').attr('id').replace(/[^0-9]/ig, ''));
          oriTotal = parseFloat(jQuery('#subTotalAmount_' + invoiceIndex).html().replace(/[^0-9\.]/ig, '') || 0);
          total = oriTotal + deffAmt;
          jQuery('#subTotalAmount_' + invoiceIndex).html(this.formatAmount(icsjs.fx.roundAmount(total, currency.roundingOption)));
          jQuery('#subTotalCurrency_' + invoiceIndex).html(currency.code);
        } else {
          oriTotal = parseFloat(Ext.getCmp('totalAmount').getValue().replace(/[^0-9\.]/ig, '') || 0);
          total = oriTotal + deffAmt;
          if (total === 0) {
            Ext.getCmp('totalAmount').setValue('No Charge');
          } else {
            Ext.getCmp('totalAmount').setValue(currency.code + '  ' + this.formatAmount(icsjs.fx.roundAmount(total, currency.roundingOption)));
          }
        }
      },
      setTotal: function(invoiceIndex, currency) {
        var total;
        total = 0;
        jQuery('#invoiceIndex' + invoiceIndex).find('.exchangedAmount').each(function(index, td) {
          total += parseFloat(jQuery(td).html().replace(/,/g, ''));
        });
        jQuery('#invoiceIndex' + invoiceIndex).find('.vatAmount').each(function(index, td) {
          total += parseFloat(jQuery(td).html().replace(/,/g, ''));
        });
        if (total === 0) {
          Ext.getCmp('totalAmount').setValue('No Charge');
        } else {
          Ext.getCmp('totalAmount').setValue(currency.code + '  ' + this.formatAmount(icsjs.fx.roundAmount(total, currency.roundingOption)));
        }
      },
      refreshRow: function(tr, resultForDisplay) {
        var chargeDto, intercomCharge;
        chargeDto = this.getChargeDto(tr);
        this.setChargeAmount(tr, resultForDisplay.netAmt);
        this.setExchChargeAmount(tr, resultForDisplay);
        if (tr.find('.vatAmount').length > 0) {
          this.setVatAmount(tr, resultForDisplay.vatExchAmt);
        }
        intercomCharge = tr.next('.intercomCharge');
        if (intercomCharge.length > 0 && resultForDisplay.vatExchAmt > 0) {
          intercomCharge.find('td.exchangedAmount').html(resultForDisplay.vatExchAmt);
        }
      },
      isValidExchangeRate: function(thisScope) {
        var me;
        me = this;
        if (me.validateExchangeRate(thisScope)) {
          me.calculateRow(jQuery(thisScope).closest('tr.charge'));
        }
      },
      validateExchangeRate: function(thisScope) {
        var errMsg, exchangeRatePrecision, me, tr, unitInput, validateReturn;
        me = this;
        unitInput = jQuery(thisScope);
        tr = unitInput.closest('tr.charge');
        errMsg = void 0;
        if (unitInput.val() === '' || Number(unitInput.val()) === 0) {
          errMsg = MESSAGES.AP.HIGHLIGHT.MISSING('Exchange Rate');
        } else {
          exchangeRatePrecision = {
            minUiDisplayAfterDecimalPlaces: 6,
            noOfDigitAfterDecimalPlaces: 7,
            noOfDigitBeforeDecimalPlaces: 8
          };
          validateReturn = validateNumberBeforeAndAfterDecimalPlaces('', unitInput.val(), exchangeRatePrecision);
          if (validateReturn && validateReturn.errorMsg) {
            errMsg = MESSAGES.AP.HIGHLIGHT.INVALID_NUMBER('Exchange Rate', validateReturn.errorMsg);
          }
          if (!errMsg && !me.validateToleranceExchRate(unitInput)) {
            errMsg = MESSAGES.AP.HIGHLIGHT.EXCHANGE_RATE_EXCEED_TOLERANCE();
          }
          me.getChargeDto(tr).exchRate = Number(validateReturn.formattedValue);
          unitInput.val(validateReturn.formattedValue);
        }
        return me.checkValid(unitInput, errMsg);
      },
      validateToleranceExchRate: function(input) {
        var baseExchRate, charge, lowerLimit, newRate, toleranceExchRate, tr, upperLimit;
        tr = input.closest('tr.charge');
        charge = this.getChargeDto(tr);
        toleranceExchRate = AR.controller.ArCreateDetail.exchRateTolerance;
        baseExchRate = charge.baseExchRate;
        if (!toleranceExchRate) {
          return true;
        }
        if (!baseExchRate) {
          return true;
        }
        newRate = Number(input.val());
        upperLimit = (100 + toleranceExchRate) * baseExchRate / 100;
        lowerLimit = (100 - toleranceExchRate) * baseExchRate / 100;
        return newRate >= lowerLimit && newRate <= upperLimit;
      },
      isValidUnit: function(thisScope) {
        if (this.validateUnit(thisScope)) {
          this.calculateRow(jQuery(thisScope).closest('tr.charge'));
        }
      },
      validateUnit: function(thisScope) {
        var errMsg, me, result, tr, unitInput;
        me = this;
        unitInput = jQuery(thisScope);
        tr = unitInput.closest('tr.charge');
        errMsg = void 0;
        if (unitInput.val() === '' || Number(unitInput.val()) === 0) {
          errMsg = MESSAGES.AP.HIGHLIGHT.MISSING('Unit');
        } else {
          if (isNaN(unitInput.val())) {
            errMsg = 'Invalid Number';
          } else if (Number(unitInput.attr('no')) !== 0 && Number(unitInput.val()) < 0) {
            errMsg = MESSAGES.AP.UNIT_LESS_THAN_ZERO();
          } else {
            result = AR.util.fn.checkUnit(unitInput.val(), Number(unitInput.attr('decimalPlace')));
            errMsg = result.errorMsg;
            me.getChargeDto(tr).chargeMeasurementList[Number(unitInput.attr('no'))].unit = result.formattedValue;
            unitInput.val(result.formattedValue);
          }
        }
        return me.checkValid(unitInput, errMsg);
      },
      isValidUnitRate: function(thisScope) {
        if (this.validateUnitRate(thisScope)) {
          this.calculateRow(jQuery(thisScope).closest('tr.charge'));
        }
      },
      validateUnitRate: function(thisScope) {
        var chargeDto, chargeIndex, errMsg, me, tr, unitRate, unitRateInput;
        me = this;
        unitRateInput = jQuery(thisScope);
        tr = unitRateInput.closest('tr.charge');
        chargeIndex = Number(tr.attr('id').replace(/[^0-9]/ig, ''));
        errMsg = void 0;
        if (unitRateInput.val() === '' || Number(unitRateInput.val()) === 0) {
          errMsg = MESSAGES.AP.HIGHLIGHT.MISSING('Charge/Unit');
        } else {
          if (isNaN(unitRateInput.val())) {
            errMsg = 'Invalid Number';
          } else if (Number(unitRateInput.val()) < 0) {
            errMsg = MESSAGES.AP.UNIT_LESS_THAN_ZERO();
          } else {
            chargeDto = me.getChargeDto(tr);
            unitRate = icsjs.fx.roundAmount(unitRateInput.val(), chargeDto.currency.roundingOption);
            chargeDto.unitRate = unitRate;
            unitRateInput.val(unitRate);
          }
        }
        return me.checkValid(unitRateInput, errMsg);
      },
      validateTaxCode: function(thisScope) {
        var errMsg, me, taxCodeInput;
        me = this;
        taxCodeInput = jQuery(thisScope);
        errMsg = void 0;
        if (taxCodeInput.val() === '') {
          errMsg = MESSAGES.AP.HIGHLIGHT.MISSING('Tax Code');
        }
        return me.checkValid(taxCodeInput, errMsg);
      },
      onChangeTaxCode: function(thisScope) {
        var chargeDto, displayVatRate, i, ln, taxCode, taxCodeRecord, tr;
        tr = jQuery(thisScope).closest('tr');
        taxCode = tr.find('select.taxCode').val();
        chargeDto = this.getChargeDto(tr);
        if (!AR.util.fn.validateTaxCode(tr.find('select.taxCode'))) {
          return;
        }
        taxCodeRecord = null;
        i = 0;
        ln = AR.controller.ArCreateDetail.taxCodeList.length;
        while (i < ln) {
          if (taxCode === AR.controller.ArCreateDetail.taxCodeList[i].taxCode) {
            taxCodeRecord = AR.controller.ArCreateDetail.taxCodeList[i];
          }
          i++;
        }
        if (chargeDto.intercom) {
          chargeDto.taxCode = taxCodeRecord.taxCode;
          chargeDto.remarks = taxCodeRecord.remarks;
          tr.find('.remarks').html(chargeDto.remarks);
          return;
        }
        if (taxCodeRecord) {
          chargeDto.taxCode = taxCodeRecord.taxCode;
          chargeDto.remarks = taxCodeRecord.remarks;
          chargeDto.vatRate = taxCodeRecord.taxRate;
        } else {
          chargeDto.vatRate = 0;
          chargeDto.remarks = '';
          chargeDto.taxCode = '';
        }
        displayVatRate = chargeDto.vatRate;
        if (parseInt(chargeDto.vatRate) === chargeDto.vatRate) {
          displayVatRate = chargeDto.vatRate + '.0';
        }
        if (tr.find('select.vatRate').length > 0) {
          tr.find('select.vatRate').val(chargeDto.vatRate);
        } else {
          tr.find('.vatRate').html(displayVatRate);
        }
        tr.find('.remarks').html(chargeDto.remarks);
        AR.util.fn.calculateRow(tr);
      },
      onChangeVatRate: function(thisScope) {
        var chargeDto, select, tr;
        select = jQuery(thisScope);
        tr = select.closest('tr');
        chargeDto = this.getChargeDto(tr);
        chargeDto.vatRate = parseFloat(select.val());
        AR.util.fn.calculateRow(tr);
      },
      updateChargeRemarks: function(thisScope) {
        var chargeDto, tr;
        tr = jQuery(thisScope).closest('tr');
        chargeDto = this.getChargeDto(tr);
        chargeDto.remarks = jQuery(thisScope).val();
      },
      onChangeRequestByShipper: function(thisScope) {
        var chargeDto, tr;
        tr = jQuery(thisScope).closest('tr');
        chargeDto = this.getChargeDto(tr);
        chargeDto.requestedByShipper = jQuery(thisScope).attr('checked');
      },
      calculateSubTotal: function(invoiceIndex, currency) {
        var total, vatTotal;
        total = 0;
        vatTotal = 0;
        jQuery('#invoiceIndex' + invoiceIndex).find('.exchangedAmount').each(function(index, td) {
          total += parseFloat(jQuery(td).html().replace(/,/g, ''));
        });
        jQuery('#invoiceIndex' + invoiceIndex).find('.vatAmount').each(function(index, td) {
          vatTotal += parseFloat(jQuery(td).html().replace(/,/g, ''));
        });
        jQuery('#subTotalAmount_' + invoiceIndex).html(this.formatAmount(icsjs.fx.roundAmount(total + vatTotal, currency.roundingOption)));
        jQuery('#subTotalCurrency_' + invoiceIndex).html(currency.code);
      },
      refreshTotals: function() {
        var i, invoiceAmendDtoList, ln;
        invoiceAmendDtoList = AR.controller.ArCreateDetail.invoiceAmendDtoList;
        i = 0;
        ln = invoiceAmendDtoList.length;
        while (i < ln) {
          if (invoiceAmendDtoList[i]) {
            this.calculateSubTotal(i, invoiceAmendDtoList[i].currency);
          }
          i++;
        }
      },
      getInvoiceDto: function(tr) {
        var invoiceIndex;
        invoiceIndex = Number(tr.closest('tbody').attr('id').replace(/[^0-9]/ig, ''));
        return AR.controller.ArCreateDetail.invoiceAmendDtoList[invoiceIndex];
      },
      getChargeDto: function(tr, invoiceDto) {
        var chargeIndex;
        if (!invoiceDto) {
          invoiceDto = this.getInvoiceDto(tr);
        }
        chargeIndex = Number(tr.attr('id').replace(/[^0-9]/ig, ''));
        if (invoiceDto.existingChargeList && chargeIndex < invoiceDto.existingChargeList.length) {
          return invoiceDto.existingChargeList[chargeIndex];
        } else {
          return invoiceDto.newAddedChargeList[chargeIndex - invoiceDto.existingChargeList.length];
        }
      },
      afterAddCharge: function(chargeDtoList) {
        var invoiceDto;
        var invoiceIndex;
        var chargeDto, chargeRow, chargeRowMap, i, index, invoiceDto, invoiceIndex, ln, tbody, totalIndex, trList;
        chargeRowMap = {};
        i = 0;
        ln = chargeDtoList.length;
        while (i < ln) {
          chargeDto = chargeDtoList[i];
          invoiceIndex = chargeDto.invoiceIndex;
          invoiceDto = AR.controller.ArCreateDetail.invoiceAmendDtoList[invoiceIndex];
          chargeDto.baseExchRate = chargeDto.exchRate;
          AR.util.fn.calculateCharge(invoiceDto, chargeDto);
          if (!invoiceDto.existingChargeList) {
            invoiceDto.existingChargeList = [];
          }
          if (!invoiceDto.newAddedChargeList) {
            invoiceDto.newAddedChargeList = [];
          }
          if (!chargeRowMap['#invoiceIndex' + invoiceIndex]) {
            chargeRowMap['#invoiceIndex' + invoiceIndex] = [];
          }
          totalIndex = invoiceDto.existingChargeList.length + invoiceDto.newAddedChargeList.length;
          invoiceDto.newAddedChargeList.push(chargeDto);
          chargeRow = chargeTableTpl.generateChargeRow(invoiceDto, chargeDto, false, totalIndex);
          chargeRowMap['#invoiceIndex' + invoiceIndex].push(chargeRow);
          i++;
        }
        for (index in chargeRowMap) {
          tbody = jQuery(index);
          trList = chargeRowMap[index];
          invoiceIndex = Number(index.replace(/[^0-9]/ig, ''));
          invoiceDto = AR.controller.ArCreateDetail.invoiceAmendDtoList[invoiceIndex];
          tbody.append(trList.join(''));
          if (AR.controller.ArCreateDetail.isBatch) {
            AR.util.fn.calculateSubTotal(invoiceIndex, invoiceDto.currency);
          } else {
            AR.util.fn.setTotal(invoiceIndex, invoiceDto.currency);
          }
        }
        if (Ext.getCmp('add_charge_detail_window')) {
          Ext.getCmp('add_charge_detail_window').destroy();
        }
        if (chargeDtoList.length > 0) {
          jQuery('#addNewChargeBlock').hide();
        }
        Ext.getCmp('ar_create_detail_charge').updateLayout();
        AR.util.fn.validateAll();
        AR.util.fn.distinguishCharge();
      },
      distinguishCharge: function() {
        jQuery('.chargeBody').each(function() {
          var isEven;
          isEven = true;
          jQuery(this).children('tr').each(function(index) {
            if (Ext.String.startsWith(jQuery(this).attr('id'), 'chargeRow')) {
              isEven = !isEven;
            }
            if (isEven) {
              jQuery(this).addClass('charge-even');
            } else {
              jQuery(this).removeClass('charge-even');
            }
          });
        });
      },
      checkUnit: function(value, decimalPlace) {
        var precisionInfo;
        precisionInfo = {};
        precisionInfo.noOfDigitBeforeDecimalPlaces = 15;
        precisionInfo.noOfDigitAfterDecimalPlaces = decimalPlace;
        precisionInfo.minUiDisplayAfterDecimalPlaces = decimalPlace;
        return validateNumberBeforeAndAfterDecimalPlaces(null, value, precisionInfo);
      },
      validateAll: function() {
        var i, invoiceList, j, ln, lnj, result, trs;
        invoiceList = AR.controller.ArCreateDetail.invoiceAmendDtoList;
        result = true;
        i = 0;
        ln = invoiceList.length;
        while (i < ln) {
          trs = jQuery('#invoiceIndex' + i).children();
          j = 0;
          lnj = trs.length;
          while (j < lnj) {
            result = AR.util.fn.validateRow(jQuery(trs[j])) && result;
            j++;
          }
          i++;
        }
        return result;
      },
      validateRow: function(tr) {
        var i, input, inputs, ln, result;
        inputs = tr.find('input,select');
        result = true;
        i = 0;
        ln = inputs.length;
        while (i < ln) {
          input = jQuery(inputs[i]);
          if (input.hasClass('unit')) {
            result = AR.util.fn.validateUnit(input) && result;
          } else if (input.hasClass('chargeUnit')) {
            result = AR.util.fn.validateUnitRate(input) && result;
          } else if (input.hasClass('exchangeRate')) {
            result = AR.util.fn.validateExchangeRate(input) && result;
          } else if (input.hasClass('taxCode')) {
            result = AR.util.fn.validateTaxCode(input) && result;
          }
          i++;
        }
        tr.find('td.chargeUnit').each(function(index, td) {
          var unitRateTd;
          unitRateTd = jQuery(td);
          if (Number(unitRateTd.html()) === 0) {
            result = false;
            AR.util.fn.checkValid(unitRateTd, MESSAGES.AP.HIGHLIGHT.MISSING('Charge/Unit'));
          }
        });
        return result;
      },
      deleteCharge: function() {
        var chargeBody, chargeIndex, i, intercomTr, invoiceDto, invoiceIndex, ln, selectedRows, selectedTrs, tr;
        selectedRows = jQuery('#charge_table .chargeCheckBox:checked');
        if (selectedRows.length <= 0) {
          icsjs.fx.promptErrorMsgV2(MESSAGES.COMM.EMPTY_SELECT('Charge'));
        } else {
          selectedTrs = selectedRows.closest('tr.charge');
          i = 0;
          ln = selectedTrs.length;
          while (i < ln) {
            tr = jQuery(selectedTrs[i]);
            intercomTr = tr.next('.intercomCharge');
            if (intercomTr.length > 0) {
              intercomTr.remove();
            }
            chargeIndex = parseInt(tr.attr('id').replace(/[^0-9]/ig, ''));
            invoiceDto = AR.util.fn.getInvoiceDto(tr);
            if (chargeIndex < invoiceDto.existingChargeList.length) {
              invoiceDto.existingChargeList[chargeIndex] = null;
            } else {
              invoiceDto.newAddedChargeList[chargeIndex - invoiceDto.existingChargeList.length] = null;
            }
            tr.remove();
            i++;
          }
          if (AR.controller.ArCreateDetail.isBatch) {
            AR.util.fn.refreshTotals();
          } else {
            invoiceIndex = Number(jQuery('#charge_table .chargeBody').attr('id').replace(/[^0-9]/ig, ''));
            AR.util.fn.setTotal(invoiceIndex, AR.controller.ArCreateDetail.invoiceAmendDtoList[invoiceIndex].currency);
            chargeBody = jQuery('#invoiceIndex' + invoiceIndex);
            if (chargeBody.children().length === 0) {
              jQuery('#addNewChargeBlock').show();
            }
          }
        }
        jQuery('#chargeCheckBoxHeader').attr('checked', '');
        Ext.getCmp('ar_create_detail_charge').updateLayout();
        AR.util.fn.distinguishCharge();
      },
      getCurrency: function(currCode) {
        var curr;
        curr = null;
        Ext.Array.each(AR.controller.ArCreateDetail.currencyDtoList, function(dto) {
          if (dto.code === currCode) {
            curr = dto;
            return false;
          }
        });
        return curr;
      },
      getExchangeRate: function(fromCurrCode, toCurrCode) {
        var exchangeRate;
        exchangeRate = 1;
        Ext.Array.each(AR.controller.ArCreateDetail.exchangeRateDtoList, function(dto) {
          if (dto.fromCurrencyCode === fromCurrCode && dto.toCurrencyCode === toCurrCode) {
            exchangeRate = dto.exchangeRate;
            return false;
          }
        });
        return exchangeRate;
      },
      updateExchangeRate: function(tr, exchangeRateTd, exchangeRate, toCurrCode) {
        var editable, me, unitRateStr;
        me = this;
        unitRateStr = [];
        editable = exchangeRate !== 1;
        if (editable) {
          exchangeRateTd.addClass('column-editable');
          unitRateStr.push('<input class="NOBDINPUT FIELD_TEXT exchangeRate" style="width:100%;text-align:right;" value="' + Number(exchangeRate).toFixed(6) + '" onblur="AR.util.fn.isValidExchangeRate(this);"/>');
        } else {
          exchangeRateTd.removeClass('column-editable');
          unitRateStr.push('1.000000');
        }
        exchangeRateTd.html(unitRateStr.join(''));
        tr.find('.toCurrency').text(toCurrCode);
        me.calculateRow(tr);
      }
    });
  })();

}).call(this);

//# sourceMappingURL=net.js.map
