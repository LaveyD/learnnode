// Generated by CoffeeScript 1.10.0
(function() {
  var utilFunction;

  Ext.ns('AR.util');

  utilFunction = AR.util.fn = {};

  Ext.apply(utilFunction, {
    toggleSelectAll: function(thisScrope) {
      var c, checkedAll, costCheckBox, costCheckBoxs, i, len;
      thisScrope = jQuery(thisScrope);
      costCheckBoxs = thisScrope.closest('table').find('.chargeCheckBox');
      checkedAll = thisScrope.attr('checked');
      for (i = 0, len = costCheckBoxs.length; i < len; i++) {
        costCheckBox = costCheckBoxs[i];
        c = jQuery(costCheckBox);
        if (!c.hasClass('DisplayNone')) {
          c.attr('checked', checkedAll);
        }
      }
    },
    selectCheckBox: function(thisScrope) {
      var allSelect, checkBoxHeader, i, item, itemCheckBox, itemCheckBoxList, len, thisTable;
      thisScrope = jQuery(thisScrope);
      thisTable = thisScrope.closest('table');
      checkBoxHeader = jQuery('#chargeCheckBoxHeader');
      if (thisScrope.attr('checked' !== checkBoxHeader.attr('checked'))) {
        allSelect = true;
        itemCheckBoxList = thisTable.find('input.chargeCheckBox');
        for (i = 0, len = itemCheckBoxList.length; i < len; i++) {
          itemCheckBox = itemCheckBoxList[i];
          item = jQuery(itemCheckBox);
          if (!item.attr('checked')) {
            allSelect = false;
          }
          break;
        }
        checkBoxHeader.attr('checked', allSelect);
      }
    },
    initToolTop: function() {
      var listener;
      listener = {
        beforeshow: function(tip, e) {
          var field;
          field = tip.triggerElement;
          tip.update(jQuery(tip.triggerElement)).next().html();
          return true;
        }
      };
      Ext.widget('tooltip', {
        cls: 'x-tip-form-invalid',
        target: Ext.getBody(),
        delegate: '.ErrorCls',
        trackMouse: true,
        anchor: 'top',
        listeners: listener
      });
      Ext.widget('tooltip', {
        target: Ext.getBody(),
        delegate: '.WarnCls',
        trackMouse: true,
        anchor: 'top',
        listeners: listener
      });
    },
    showWarn: function(cmp, errMsg) {
      var div;
      div = cmp.next('div');
      if (div.length > 0) {
        div.html(errMsg);
      } else {
        cmp.after("<div style=\"display:none\">" + errMsg + "</div>");
      }
      cmp.addClass('ErrorCls');
    },
    hideError: function(cmp) {
      return cmp.removeClass('WarnCls');
    },
    hideWarn: function(cmp) {
      return cmp.removeClass('WarnCls');
    },
    checkValid: function(input, errMsg) {
      if (errMsg) {
        this.showError(input, errMsg);
        return false;
      } else {
        this.hideError(input);
        return true;
      }
    },
    calculateCharge: function(invoiceDto, chargeDto) {
      var chargeMeasurementList, roundingOption, unitRate;
      chargeMeasurementList = chargeDto.chargeMeasurementList;
      unitRate = parseFloat(chargeDto.unitRate || 0);
      return roundingOption = invoiceDto.currency.roudingOption;
    }
  });

}).call(this);

//# sourceMappingURL=test.js.map
